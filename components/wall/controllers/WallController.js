// Generated by CoffeeScript 1.7.1
'use strict';
WallModule.controller('WallController', function($scope, $stateParams, $location, RestModel, params, $timeout, $window, user, userSearchFor) {
  $scope.stateParams = $stateParams;
  $scope.window = window;
  $scope.process = false;
  $scope.loading = false;
  $scope.openOtherSearch = false;
  $scope.isOpen = false;
  $scope.params = params;
  $scope.user = user.response[0];
  $scope.userId = $scope.stateParams.userId;
  $scope.userSearchForId = $scope.stateParams.selectedId;
  $scope.userSearchFor = userSearchFor;
  $scope.back = function() {
    return $location.path('user/' + $scope.userId);
  };
  $scope.photo = function() {
    return $location.path('user/' + $scope.userId + '/selected/' + $scope.userSearchForId + '/photo');
  };
  $scope.returnFormSearch = function() {
    $scope.likePosts = null;
    $scope.countPost = null;
    return $scope.openOtherSearch = false;
  };
  $scope.changeUser = function(user, userSearchFor) {
    $scope.user = userSearchFor;
    $scope.userSearchFor = user;
    $scope.userId = userSearchFor.id;
    $scope.userSearchForId = user.id;
    return $scope.right = !$scope.right;
  };
  $scope.increasePhoto = function(photo) {
    $scope.process = true;
    $scope.openBigBlade = true;
    return $scope.image = photo.photo_604;
  };
  $scope.closeBlade = function() {
    $scope.process = false;
    return $scope.openBigBlade = false;
  };
  $scope.likesWall = function(countPost) {
    $scope.openOtherSearch = true;
    $scope.loading = true;
    $scope.countPost = countPost;
    return RestModel.getWallPost($scope.userId, $scope.params, $scope.countPost).then(function(data) {
      $scope.posts = data.response.items.length !== 0 ? data.response.items : null;
      if ($scope.posts !== null) {
        return $scope.getLikesFromPosts();
      } else {
        $scope.likePosts = [];
        return $scope.loading = false;
      }
    }, function(error) {
      return console.log(error);
    });
  };
  $scope.getLikesFromPosts = function() {
    var index, type;
    $scope.likePosts = [];
    $scope.postsLength = $scope.posts.length;
    type = "post";
    if ($scope.postsLength <= 5) {
      $scope.posts.forEach(function(post) {
        return RestModel.getLikes($scope.userId, $scope.params, post.id, type).then(function(data) {
          var listId;
          listId = data.response.items ? data.response.items : null;
          if (listId !== null) {
            listId.forEach(function(id) {
              if (id === parseFloat($scope.userSearchForId)) {
                return $scope.likePosts.push(post);
              }
            });
            if ($scope.posts[$scope.postsLength - 1] === post) {
              return $scope.loading = false;
            }
          }
        }, function(error) {
          return console.log(error);
        });
      });
    }
    if ($scope.postsLength > 5) {
      index = 0;
      return $scope.getLikesRecursion($scope.posts[index], index);
    }
  };
  $scope.getLikesRecursion = function(post, index) {
    $scope.index = index;
    if ($scope.index % 4 === 0 && $scope.index !== $scope.postsLength && $scope.index !== 0) {
      $timeout(function() {
        return $scope.getLikes(post);
      }, 2000);
    }
    if ($scope.index % 4 !== 0 && $scope.index !== $scope.postsLength || $scope.index === 0) {
      $scope.getLikes(post);
    }
    if (index === $scope.postsLength) {
      console.log($scope.likePosts);
      $scope.loading = false;
      return true;
    }
  };
  return $scope.getLikes = function(post) {
    var type;
    console.log(post);
    type = "post";
    RestModel.getLikes($scope.userId, $scope.params, post.id, type).then(function(data) {
      var listId;
      $scope.index = $scope.index + 1;
      listId = data.response.items ? data.response.items : null;
      if (listId !== null) {
        listId.forEach(function(id) {
          if (id === parseFloat($scope.userSearchForId)) {
            return $scope.likePosts.push(post);
          }
        });
      }
      return $scope.getLikesRecursion($scope.posts[$scope.index], $scope.index);
    }, function(error) {
      console.log(error);
      if (error.code === 6) {
        return $timeout(function() {
          return $scope.getLikeRecursion(post, $scope.index);
        }, 2000);
      }
    });
    return $scope.openMusic = function(attachment) {
      return attachment.isOpen = !attachment.isOpen;
    };
  };
});

//# sourceMappingURL=WallController.map

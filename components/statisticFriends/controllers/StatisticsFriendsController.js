// Generated by CoffeeScript 1.7.1
'use strict';
StatisticsFriendsModule.controller('StatisticsFriendsController', function($scope, Static, $stateParams, $state, $location, $timeout, RestModel, Loader, params, currentUser, friends) {
  $scope.params = params;
  Static.params = params;
  Static.resultFriends = [];
  $scope.currentUser = currentUser.response[0];
  $scope.friends = friends.response.items;
  $scope.offset = 0;
  $scope.objectDate = {};
  $scope.objectDate.date = "first";
  $scope.selectedStat = true;
  $scope.home = function() {
    return $state.transitionTo('friends');
  };
  $scope.choosing = function() {
    return $scope.selectedStat = true;
  };
  $scope.getStatisticAboutFriends = function() {
    var statisticFriends;
    if (!$scope.resultFriends) {
      $scope.resultFriends = [];
      statisticFriends = RestModel.friendsOnlineOrDelete(null, $scope.friends);
      $scope.loading = true;
      return Static.getListCountFriends(statisticFriends).then(function(data) {
        $scope.resultFriends = data;
        $scope.loading = false;
        $scope.selectedStat = false;
        $scope.firstStat = true;
        $scope.secondStat = false;
        $scope.thirdStat = false;
        return $scope.fourStat = false;
      });
    } else {
      $scope.selectedStat = false;
      $scope.firstStat = true;
      $scope.secondStat = false;
      $scope.thirdStat = false;
      return $scope.fourStat = false;
    }
  };
  $scope.getStatActiveUser = function() {
    var statisticFriends;
    $scope.userPhotos = [];
    $scope.userLikes = [];
    console.log($scope.resultStatSecond);
    $scope.resultStatSecond = [];
    $scope.arrayIdFriendsPhoto = {};
    statisticFriends = RestModel.friendsOnlineOrDelete(null, $scope.friends);
    angular.forEach(statisticFriends, function(user) {
      $scope.arrayIdFriendsPhoto[user.id] = user;
      return $scope.arrayIdFriendsPhoto[user.id].count = 0;
    });
    $scope.getActiveScan($scope.currentUser.counters.photos);
    return $scope.loading = true;
  };
  $scope.getActiveScan = function(count) {
    if (count < 200) {
      return $timeout(function() {
        return RestModel.getPhotoAll($scope.currentUser.id, $scope.params, 200).then(function(data) {
          $scope.offset = 0;
          if (angular.isDefined(data.response && data.response.items)) {
            $scope.userPhotos.push(data.response.items);
            $scope.userPhotos = $scope.getArrayPhoto($scope.userPhotos);
            return $scope.getLikes($scope.userPhotos, "photo");
          }
        }, function(error) {
          return console.log(error);
        });
      }, 300);
    } else {
      return $timeout(function() {
        return RestModel.getPhotoAll($scope.currentUser.id, $scope.params, 200, $scope.offset).then(function(data) {
          if (angular.isDefined(data.response && data.response.items)) {
            $scope.offset = $scope.offset + 200;
            count = count - 200;
            $scope.userPhotos.push(data.response.items);
            return $scope.getActiveScan(count);
          }
        }, function(error) {
          return console.log(error);
        });
      }, 335);
    }
  };
  $scope.getArrayPhoto = function(array) {
    var temp;
    temp = [];
    angular.forEach(array, function(items) {
      return angular.forEach(items, function(item) {
        return temp.push(item);
      });
    });
    return temp;
  };
  $scope.getLikes = function(photos, type) {
    var tempPhotos;
    if (type == null) {
      type = null;
    }
    if (type !== null) {
      $scope.type = type;
    }
    tempPhotos = '';
    if (photos.length < 25) {
      if (photos.length !== 0) {
        return $timeout(function() {
          return RestModel.getLikesExecute($scope.currentUser.id, photos, $scope.params, $scope.type).then(function(likes) {
            $scope.userLikes.push(likes.response);
            return $scope.isActiveFriends($scope.userLikes, $scope.type);
          }, function(error) {
            return console.log(error);
          });
        }, 300);
      } else {
        $scope.selectedStat = false;
        $scope.loading = false;
        $scope.firstStat = false;
        $scope.secondStat = true;
        return $scope.thirdStat = false;
      }
    } else {
      tempPhotos = photos.splice(0, 24);
      return $timeout(function() {
        return RestModel.getLikesExecute($scope.currentUser.id, tempPhotos, $scope.params, $scope.type).then(function(likes) {
          $scope.userLikes.push(likes.response);
          return $scope.getLikes(photos);
        }, function(error) {
          return console.log(error);
        });
      }, 300);
    }
  };
  $scope.isActiveFriends = function(likesArray, type) {
    var tempLikesArray;
    tempLikesArray = [];
    angular.forEach(likesArray, function(likes) {
      return angular.forEach(likes, function(like, key) {
        return angular.forEach(like.users, function(user) {
          return tempLikesArray.push(user);
        });
      });
    });
    if (type === 'post') {
      angular.forEach(tempLikesArray, function(item) {
        if ($scope.arrayIdFriendsWall[item]) {
          return $scope.arrayIdFriendsWall[item].count = $scope.arrayIdFriendsWall[item].count + 1;
        }
      });
      angular.forEach($scope.arrayIdFriendsWall, function(user) {
        return $scope.resultStatThird.push(user);
      });
      $scope.resultStatThird = $scope.resultStatThird.sort($scope.sortableLikes);
      $scope.resultStatThird = Loader.renderBand($scope.resultStatThird);
      $scope.selectedStat = false;
      $scope.loading = false;
      $scope.firstStat = false;
      $scope.secondStat = false;
      $scope.thirdStat = true;
      return $scope.fourStat = false;
    } else {
      angular.forEach(tempLikesArray, function(item) {
        if ($scope.arrayIdFriendsPhoto[item]) {
          return $scope.arrayIdFriendsPhoto[item].count = $scope.arrayIdFriendsPhoto[item].count + 1;
        }
      });
      angular.forEach($scope.arrayIdFriendsPhoto, function(user) {
        return $scope.resultStatSecond.push(user);
      });
      $scope.resultStatSecond = $scope.resultStatSecond.sort($scope.sortableLikes);
      $scope.resultStatSecond = Loader.renderBand($scope.resultStatSecond);
      $scope.selectedStat = false;
      $scope.loading = false;
      $scope.firstStat = false;
      $scope.secondStat = true;
      $scope.thirdStat = false;
      return $scope.fourStat = false;
    }
  };
  $scope.sortableLikes = function(a, b) {
    return b.count - a.count;
  };
  $scope.more = function(user) {
    return $state.transitionTo('user', {
      userId: user.id || user.uid
    });
  };
  $scope.getStatActiveUserWall = function() {
    var statisticFriends;
    $scope.userWall = [];
    $scope.userLikes = [];
    $scope.resultStatThird = [];
    $scope.arrayIdFriendsWall = {};
    statisticFriends = RestModel.friendsOnlineOrDelete(null, $scope.friends);
    angular.forEach(statisticFriends, function(user) {
      $scope.arrayIdFriendsWall[user.id] = user;
      return $scope.arrayIdFriendsWall[user.id].count = 0;
    });
    $scope.getScanUserWall();
    return $scope.loading = true;
  };
  $scope.getScanUserWall = function(count) {
    if (count == null) {
      count = null;
    }
    if (count === null) {
      $scope.offset = 0;
    }
    if (count < 100 || count === null) {
      return $timeout(function() {
        return RestModel.getAllWallPost($scope.currentUser.id, $scope.params, count || 100, $scope.offset).then(function(data) {
          if (count === null) {
            count = data.response.count;
            $scope.wallPosts = data.response.count;
          }
          $scope.userWall.push(data.response.items);
          if (count < 100) {
            return $scope.isLikesFromWall($scope.userWall);
          } else {
            count = count - 100;
            $scope.offset = $scope.offset + 100;
            return $scope.getScanUserWall(count);
          }
        }, function(error) {
          return console.log(error);
        });
      }, 335);
    } else {
      return $timeout(function() {
        return RestModel.getAllWallPost($scope.currentUser.id, $scope.params, 100, $scope.offset).then(function(data) {
          $scope.userWall.push(data.response.items);
          count = count - 100;
          $scope.offset = $scope.offset + 100;
          return $scope.getScanUserWall(count);
        }, function(error) {
          return console.log(error);
        });
      }, 335);
    }
  };
  $scope.isLikesFromWall = function(walls) {
    var arrayPost;
    arrayPost = [];
    angular.forEach(walls, function(items) {
      return angular.forEach(items, function(item) {
        if (item.likes.count !== 0) {
          return arrayPost.push(item);
        }
      });
    });
    return $scope.getLikes(arrayPost, 'post');
  };
  $scope.showAvaType = function() {
    $scope.selectedStat = false;
    $scope.firstStat = false;
    $scope.secondStat = false;
    $scope.thirdStat = false;
    $scope.fourStat = true;
    return $scope.resultStatFour = [];
  };
  return $scope.getUpdatePhoto = function() {
    var currentDate, statisticFriends, times;
    currentDate = new Date();
    if ($scope.objectDate.date === 'first') {
      currentDate.setDate(currentDate.getDate() - 1);
      times = Math.round(currentDate.getTime() / 1000.0);
      console.log(times);
    } else {
      currentDate.setDate(currentDate.getDate() - 7);
      times = Math.round(currentDate.getTime() / 1000.0);
    }
    $scope.resultStatFour = [];
    statisticFriends = RestModel.friendsOnlineOrDelete(null, $scope.friends);
    Static.getPhotoProfileFriends(statisticFriends, times).then(function(data) {
      $scope.resultStatFour = data;
      $scope.loading = false;
      $scope.selectedStat = false;
      $scope.firstStat = false;
      $scope.secondStat = false;
      $scope.thirdStat = false;
      $scope.fourStat = true;
      return function(error) {
        return console.log(error);
      };
    });
    return $scope.loading = true;
  };
});

//# sourceMappingURL=StatisticsFriendsController.map

// Generated by CoffeeScript 1.7.1
'use strict';
GroupContentModule.controller('PostWithLikesController', function($scope, $stateParams, $state, $timeout, Loader, RestModel, Notification, LocalStorage, params) {
  $scope.loading = true;
  $scope.params = params;
  $scope.postsWithLikes = [];
  $scope.arrayLikes = [];
  $scope.countPost = 0;
  $scope.empty = false;
  Loader.startLoad();
  RestModel.getWallPost($stateParams.groupId, $scope.params, 100, 'all').then(function(data) {
    var response;
    response = data.response;
    if (response.count > 0) {
      angular.forEach(response.items, function(item) {
        if (item.likes.count > 0) {
          return $scope.postsWithLikes.push(item);
        }
      });
      return $scope.workingWithPost($scope.postsWithLikes);
    } else {
      $scope.empty = true;
      return console.log('нет постов');
    }
  }, function(error) {
    return console.log(error);
  });
  $scope.workingWithPost = function(posts) {
    var post;
    if (posts.length !== 0) {
      post = posts.splice(0, 1);
      $scope.countPost++;
      Loader.process($scope.countPost);
      return $scope.getScanUserWall(post, posts);
    } else {
      return $scope.getScanUserWall(post, posts);
    }
  };
  $scope.getScanUserWall = function(post, posts, count) {
    if (count == null) {
      count = null;
    }
    if (post === void 0) {
      return $scope.workWithLikes($scope.arrayLikes);
    } else {
      if (count === null) {
        $scope.offset = 0;
      }
      if (count < 1000 || count === null) {
        return $timeout(function() {
          return RestModel.getAllLikes('-' + $stateParams.groupId, $scope.params, post[0].id, 'post', count || 1000, $scope.offset).then(function(data) {
            if (count === null) {
              count = data.response.count;
            }
            if (angular.isDefined($scope.arrayLikes[$scope.arrayLikes.length - 1]) && post[0].id === $scope.arrayLikes[$scope.arrayLikes.length - 1].post[0].id) {
              $scope.arrayLikes[$scope.arrayLikes.length - 1].likes.push(data.response.items);
            } else {
              $scope.arrayLikes.push({
                likes: data.response.items,
                post: post
              });
            }
            if (count < 1000) {
              return $scope.workingWithPost(posts);
            } else {
              count = count - 1000;
              $scope.offset = $scope.offset + 1000;
              return $scope.getScanUserWall(post, posts, count);
            }
          }, function(error) {
            $scope.getScanUserWall(post, posts, count);
            return console.log(error);
          });
        }, 335);
      } else {
        return $timeout(function() {
          return RestModel.getAllLikes('-' + $stateParams.groupId, $scope.params, post[0].id, 'post', count || 1000, $scope.offset).then(function(data) {
            if (angular.isDefined($scope.arrayLikes[$scope.arrayLikes.length - 1]) && post[0].id === $scope.arrayLikes[$scope.arrayLikes.length - 1].post[0].id) {
              $scope.arrayLikes[$scope.arrayLikes.length - 1].likes.push(data.response.items);
            } else {
              $scope.arrayLikes.push({
                likes: data.response.items,
                post: post
              });
            }
            count = count - 1000;
            $scope.offset = $scope.offset + 1000;
            return $scope.getScanUserWall(post, posts, count);
          }, function(error) {
            $scope.getScanUserWall(post, posts, count);
            return console.log(error);
          });
        }, 335);
      }
    }
  };
  $scope.workWithLikes = function(likes) {
    Loader.stopLoad();
    $scope.wallWithLikes = [];
    angular.forEach(likes, function(items) {
      return angular.forEach(items.likes, function(item) {
        if (parseInt($stateParams.userId) === item) {
          items.post[0].date = moment.unix(items.post[0].date).format('DD.MM.YYYY HH:mm');
          return $scope.wallWithLikes.push(items.post[0]);
        }
      });
    });
    return $scope.loading = false;
  };
  $scope.returnWithGroup = function() {
    return $state.transitionTo('groupContent', {
      groupId: $stateParams.groupId
    });
  };
  return $scope.main = function() {
    return $state.transitionTo('friends');
  };
});

//# sourceMappingURL=PostWithLikesController.map
